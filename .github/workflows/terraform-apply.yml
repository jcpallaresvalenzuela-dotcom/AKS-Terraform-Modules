name: Terraform Apply AKS Cluster - Modular Construction with Customizable Naming and Tags

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev, pre, pro)'
        required: true
        default: 'dev'
        type: string
      name_prefix:
        description: 'Name prefix for all resources (e.g., "myproject" will create rg-myproject-dev, aks-myproject-dev, etc.)'
        required: true
        default: 'myproject'
        type: string
      override_variables:
        description: 'Override specific variables (JSON format, e.g., {"resource_group_name": "rg-custom", "location": "East US"})'
        required: false
        default: '{}'
        type: string
      tags:
        description: 'Tags to apply to all resources (JSON format, e.g., {"Owner": "jcpallares", "Application": "AKS Platform", "Environment": "dev"})'
        required: false
        default: '{"Owner": "jcpallares", "Application": "AKS Platform"}'
        type: string
      confirm_deployment:
        description: 'Confirm that you want to deploy this environment'
        required: true
        default: false
        type: boolean

env:
  TERRAFORM_VERSION: "1.6.0"

permissions:
  id-token: write
  contents: read

jobs:
  # Job 0: Validación y preparación
  validate-and-prepare:
    name: Validate and Prepare Deployment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    outputs:
      environment_validated: ${{ steps.validation.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Environment Selection
        id: validation
        run: |
          echo "=== Environment Validation ==="
          echo "Selected Environment: ${{ github.event.inputs.environment }}"
          
          if [ "${{ github.event.inputs.confirm_deployment }}" != "true" ]; then
            echo "❌ Deployment not confirmed. Please set confirm_deployment to true."
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ ! -d "./environment/${{ github.event.inputs.environment }}" ]; then
            echo "❌ Environment directory ./environment/${{ github.event.inputs.environment }} not found"
            echo "status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Environment validation passed"
          echo "status=validated" >> $GITHUB_OUTPUT

      - name: Validate Override Variables
        run: |
          echo "=== Override Variables Validation ==="
          OVERRIDE_VARS='${{ github.event.inputs.override_variables }}'
          
          if [ "$OVERRIDE_VARS" != "{}" ]; then
            echo "Override variables provided: $OVERRIDE_VARS"
            
            # Validar que sea JSON válido
            if echo "$OVERRIDE_VARS" | jq empty 2>/dev/null; then
              echo "✅ Override variables JSON is valid"
              echo "Parsed variables:"
              echo "$OVERRIDE_VARS" | jq -r 'to_entries[] | "  \(.key) = \(.value)"'
            else
              echo "❌ Invalid JSON format in override variables"
              exit 1
            fi
          else
            echo "ℹ️ No override variables provided, using environment defaults"
          fi

      - name: Validate Tags
        run: |
          echo "=== Tags Validation ==="
          TAGS='${{ github.event.inputs.tags }}'
          
          if [ "$TAGS" != "{}" ]; then
            echo "Tags provided: $TAGS"
            
            # Validar que sea JSON válido
            if echo "$TAGS" | jq empty 2>/dev/null; then
              echo "✅ Tags JSON is valid"
              echo "Parsed tags:"
              echo "$TAGS" | jq -r 'to_entries[] | "  \(.key) = \(.value)"'
            else
              echo "❌ Invalid JSON format in tags"
              exit 1
            fi
          else
            echo "ℹ️ No tags provided, using defaults"
          fi

  # Job 1: Crear Resource Group (base para todos)
  create-resource-group:
    name: Create Resource Group
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: validate-and-prepare
    outputs:
      resource_group_created: ${{ steps.create-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check Resource Group Module Status
        id: check-rg
        working-directory: ./environment/${{ github.event.inputs.environment }}/020-resource_group
        run: |
          echo "Checking if Resource Group module exists..."
          
          if [ -f "main.tf" ]; then
            echo "Resource Group module found, will create it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Resource Group module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Terraform Variables - Resource Group
        if: steps.check-rg.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/020-resource_group
        run: |
          echo "=== Preparing Terraform Variables for Resource Group ==="
          
          # Copiar tfvars base del environment
          if [ -f "terraform.tfvars.${{ github.event.inputs.environment }}" ]; then
            cp "terraform.tfvars.${{ github.event.inputs.environment }}" terraform.tfvars
            echo "✅ Using environment-specific tfvars: terraform.tfvars.${{ github.event.inputs.environment }}"
          elif [ -f "terraform.tfvars.example" ]; then
            cp terraform.tfvars.example terraform.tfvars
            echo "✅ Using example tfvars as base"
          else
            echo "⚠️ No tfvars found, using defaults"
            touch terraform.tfvars
          fi
          
          # Aplicar name_prefix
          echo "name_prefix = \"${{ github.event.inputs.name_prefix }}\"" >> terraform.tfvars
          
          # Aplicar tags
          TAGS='${{ github.event.inputs.tags }}'
          if [ "$TAGS" != "{}" ]; then
            echo "Applying tags..."
            echo "tags = {" >> terraform.tfvars
            echo "$TAGS" | jq -r 'to_entries[] | "  \(.key) = \"\(.value)\""' >> terraform.tfvars
            echo "}" >> terraform.tfvars
          fi
          
          # Aplicar overrides si se especifican
          OVERRIDE_VARS='${{ github.event.inputs.override_variables }}'
          if [ "$OVERRIDE_VARS" != "{}" ]; then
            echo "Applying variable overrides..."
            echo "$OVERRIDE_VARS" | jq -r 'to_entries[] | "\(.key) = \"\(.value)\""' >> terraform.tfvars
          fi
          
          echo "Final terraform.tfvars for Resource Group:"
          cat terraform.tfvars

      - name: Terraform Init - Resource Group
        if: steps.check-rg.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/020-resource_group
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for Resource Group creation..."
          terraform init

      - name: Terraform Plan - Resource Group
        if: steps.check-rg.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/020-resource_group
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Planning Resource Group infrastructure..."
          terraform plan -out=tfplan

      - name: Terraform Apply - Resource Group
        if: steps.check-rg.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/020-resource_group
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
        run: |
          echo "Creating Resource Group infrastructure..."
          terraform apply tfplan
          echo "✅ Resource Group infrastructure created successfully"

      - name: Set Create Status
        id: create-status
        run: |
          if [ "${{ steps.check-rg.outputs.exists }}" == "true" ]; then
            echo "status=created" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 2: Crear Identity (depende de Resource Group)
  create-identity:
    name: Create Identity Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: create-resource-group
    outputs:
      identity_created: ${{ steps.create-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check Identity Module Status
        id: check-identity
        working-directory: ./environment/${{ github.event.inputs.environment }}/030-identity
        run: |
          echo "Checking if Identity module exists..."
          
          if [ -f "main.tf" ]; then
            echo "Identity module found, will create it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Identity module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Terraform Variables - Identity
        if: steps.check-identity.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/030-identity
        run: |
          echo "=== Preparing Terraform Variables for Identity ==="
          
          # Copiar tfvars base del environment
          if [ -f "terraform.tfvars.${{ github.event.inputs.environment }}" ]; then
            cp "terraform.tfvars.${{ github.event.inputs.environment }}" terraform.tfvars
            echo "✅ Using environment-specific tfvars: terraform.tfvars.${{ github.event.inputs.environment }}"
          elif [ -f "terraform.tfvars.example" ]; then
            cp terraform.tfvars.example terraform.tfvars
            echo "✅ Using example tfvars as base"
          else
            echo "⚠️ No tfvars found, using defaults"
            touch terraform.tfvars
          fi
          
          # Aplicar name_prefix
          echo "name_prefix = \"${{ github.event.inputs.name_prefix }}\"" >> terraform.tfvars
          
          # Aplicar tags
          TAGS='${{ github.event.inputs.tags }}'
          if [ "$TAGS" != "{}" ]; then
            echo "Applying tags..."
            echo "tags = {" >> terraform.tfvars
            echo "$TAGS" | jq -r 'to_entries[] | "  \(.key) = \"\(.value)\""' >> terraform.tfvars
            echo "}" >> terraform.tfvars
          fi
          
          # Aplicar overrides si se especifican
          OVERRIDE_VARS='${{ github.event.inputs.override_variables }}'
          if [ "$OVERRIDE_VARS" != "{}" ]; then
            echo "Applying variable overrides..."
            echo "$OVERRIDE_VARS" | jq -r 'to_entries[] | "\(.key) = \"\(.value)\""' >> terraform.tfvars
          fi
          
          echo "Final terraform.tfvars for Identity:"
          cat terraform.tfvars

      - name: Terraform Init - Identity
        if: steps.check-identity.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/030-identity
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for Identity creation..."
          terraform init

      - name: Terraform Plan - Identity
        if: steps.check-identity.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/030-identity
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Planning Identity infrastructure..."
          terraform plan -out=tfplan

      - name: Terraform Apply - Identity
        if: steps.check-identity.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/030-identity
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
        run: |
          echo "Creating Identity infrastructure..."
          terraform apply tfplan
          echo "✅ Identity infrastructure created successfully"

      - name: Set Create Status
        id: create-status
        run: |
          if [ "${{ steps.check-identity.outputs.exists }}" == "true" ]; then
            echo "status=created" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 3: Crear Network (depende de Resource Group)
  create-network:
    name: Create Network Infrastructure
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: create-resource-group
    outputs:
      network_created: ${{ steps.create-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check Network Module Status
        id: check-network
        working-directory: ./environment/${{ github.event.inputs.environment }}/040-network
        run: |
          echo "Checking if Network module exists..."
          
          if [ -f "main.tf" ]; then
            echo "Network module found, will create it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Network module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Terraform Variables - Network
        if: steps.check-network.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/040-network
        run: |
          echo "=== Preparing Terraform Variables for Network ==="
          
          # Copiar tfvars base del environment
          if [ -f "terraform.tfvars.${{ github.event.inputs.environment }}" ]; then
            cp "terraform.tfvars.${{ github.event.inputs.environment }}" terraform.tfvars
            echo "✅ Using environment-specific tfvars: terraform.tfvars.${{ github.event.inputs.environment }}"
          elif [ -f "terraform.tfvars.example" ]; then
            cp terraform.tfvars.example terraform.tfvars
            echo "✅ Using example tfvars as base"
          fi
          
          # Aplicar name_prefix
          echo "name_prefix = \"${{ github.event.inputs.name_prefix }}\"" >> terraform.tfvars
          
          # Aplicar tags
          TAGS='${{ github.event.inputs.tags }}'
          if [ "$TAGS" != "{}" ]; then
            echo "Applying tags..."
            echo "tags = {" >> terraform.tfvars
            echo "$TAGS" | jq -r 'to_entries[] | "  \(.key) = \"\(.value)\""' >> terraform.tfvars
            echo "}" >> terraform.tfvars
          fi
          
          # Aplicar overrides si se especifican
          OVERRIDE_VARS='${{ github.event.inputs.override_variables }}'
          if [ "$OVERRIDE_VARS" != "{}" ]; then
            echo "Applying variable overrides..."
            echo "$OVERRIDE_VARS" | jq -r 'to_entries[] | "\(.key) = \"\(.value)\""' >> terraform.tfvars
          fi
          
          echo "Final terraform.tfvars for Network:"
          cat terraform.tfvars

      - name: Terraform Init - Network
        if: steps.check-network.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/040-network
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for Network creation..."
          terraform init

      - name: Terraform Plan - Network
        if: steps.check-network.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/040-network
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Planning Network infrastructure..."
          terraform plan -out=tfplan

      - name: Terraform Apply - Network
        if: steps.check-network.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/040-network
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
        run: |
          echo "Creating Network infrastructure..."
          terraform apply tfplan
          echo "✅ Network infrastructure created successfully"

      - name: Set Create Status
        id: create-status
        run: |
          if [ "${{ steps.check-network.outputs.exists }}" == "true" ]; then
            echo "status=created" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 4: Crear AKS Cluster (depende de Network e Identity)
  create-aks:
    name: Create AKS Cluster
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [create-network, create-identity]
    outputs:
      aks_created: ${{ steps.create-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check AKS Module Status
        id: check-aks
        working-directory: ./environment/${{ github.event.inputs.environment }}/010-aks
        run: |
          echo "Checking if AKS module exists..."
          
          if [ -f "main.tf" ]; then
            echo "AKS module found, will create it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "AKS module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Terraform Variables - AKS
        if: steps.check-aks.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/010-aks
        run: |
          echo "=== Preparing Terraform Variables for AKS ==="
          
          # Copiar tfvars base del environment
          if [ -f "terraform.tfvars.${{ github.event.inputs.environment }}" ]; then
            cp "terraform.tfvars.${{ github.event.inputs.environment }}" terraform.tfvars
            echo "✅ Using environment-specific tfvars: terraform.tfvars.${{ github.event.inputs.environment }}"
          elif [ -f "terraform.tfvars.example" ]; then
            cp terraform.tfvars.example terraform.tfvars
            echo "✅ Using example tfvars as base"
          else
            echo "⚠️ No tfvars found, using defaults"
            touch terraform.tfvars
          fi
          
          # Aplicar name_prefix
          echo "name_prefix = \"${{ github.event.inputs.name_prefix }}\"" >> terraform.tfvars
          
          # Aplicar tags
          TAGS='${{ github.event.inputs.tags }}'
          if [ "$TAGS" != "{}" ]; then
            echo "Applying tags..."
            echo "tags = {" >> terraform.tfvars
            echo "$TAGS" | jq -r 'to_entries[] | "  \(.key) = \"\(.value)\""' >> terraform.tfvars
            echo "}" >> terraform.tfvars
          fi
          
          # Aplicar overrides si se especifican
          OVERRIDE_VARS='${{ github.event.inputs.override_variables }}'
          if [ "$OVERRIDE_VARS" != "{}" ]; then
            echo "Applying variable overrides..."
            echo "$OVERRIDE_VARS" | jq -r 'to_entries[] | "\(.key) = \"\(.value)\""' >> terraform.tfvars
          fi
          
          echo "Final terraform.tfvars for AKS:"
          cat terraform.tfvars

      - name: Terraform Init - AKS
        if: steps.check-aks.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/010-aks
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for AKS creation..."
          terraform init

      - name: Terraform Plan - AKS
        if: steps.check-aks.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/010-aks
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Planning AKS cluster infrastructure..."
          terraform plan -out=tfplan

      - name: Terraform Apply - AKS
        if: steps.check-aks.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/010-aks
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
        run: |
          echo "Creating AKS cluster infrastructure..."
          terraform apply tfplan
          echo "✅ AKS cluster created successfully"

      - name: Wait for AKS Creation
        if: steps.check-aks.outputs.exists == 'true'
        run: |
          echo "Waiting for AKS cluster to be fully operational..."
          sleep 120
          echo "✅ Wait completed"

      - name: Set Create Status
        id: create-status
        run: |
          if [ "${{ steps.check-aks.outputs.exists }}" == "true" ]; then
            echo "status=created" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 5: Crear Ingress IP (depende de AKS)
  create-ingress-ip:
    name: Create Ingress IP
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: create-aks
    outputs:
      ingress_created: ${{ steps.create-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check Ingress IP Status
        id: check-ingress
        working-directory: ./environment/${{ github.event.inputs.environment }}/050-ingress_ip
        run: |
          echo "Checking if Ingress IP module exists..."
          
          if [ -f "main.tf" ]; then
            echo "Ingress IP module found, will create it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Ingress IP module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Terraform Variables - Ingress IP
        if: steps.check-ingress.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/050-ingress_ip
        run: |
          echo "=== Preparing Terraform Variables for Ingress IP ==="
          
          # Copiar tfvars base del environment
          if [ -f "terraform.tfvars.${{ github.event.inputs.environment }}" ]; then
            cp "terraform.tfvars.${{ github.event.inputs.environment }}" terraform.tfvars
            echo "✅ Using environment-specific tfvars: terraform.tfvars.${{ github.event.inputs.environment }}"
          elif [ -f "terraform.tfvars.example" ]; then
            cp terraform.tfvars.example terraform.tfvars
            echo "✅ Using example tfvars as base"
          else
            echo "⚠️ No tfvars found, using defaults"
            touch terraform.tfvars
          fi
          
          # Aplicar name_prefix
          echo "name_prefix = \"${{ github.event.inputs.name_prefix }}\"" >> terraform.tfvars
          
          # Aplicar tags
          TAGS='${{ github.event.inputs.tags }}'
          if [ "$TAGS" != "{}" ]; then
            echo "Applying tags..."
            echo "tags = {" >> terraform.tfvars
            echo "$TAGS" | jq -r 'to_entries[] | "  \(.key) = \"\(.value)\""' >> terraform.tfvars
            echo "}" >> terraform.tfvars
          fi
          
          # Aplicar overrides si se especifican
          OVERRIDE_VARS='${{ github.event.inputs.override_variables }}'
          if [ "$OVERRIDE_VARS" != "{}" ]; then
            echo "Applying variable overrides..."
            echo "$OVERRIDE_VARS" | jq -r 'to_entries[] | "\(.key) = \"\(.value)\""' >> terraform.tfvars
          fi
          
          echo "Final terraform.tfvars for Ingress IP:"
          cat terraform.tfvars

      - name: Terraform Init - Ingress IP
        if: steps.check-ingress.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/050-ingress_ip
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for Ingress IP creation..."
          terraform init

      - name: Terraform Plan - Ingress IP
        if: steps.check-ingress.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/050-ingress_ip
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Planning Ingress IP infrastructure..."
          terraform plan -out=tfplan

      - name: Terraform Apply - Ingress IP
        if: steps.check-ingress.outputs.exists == 'true'
        working-directory: ./environment/${{ github.event.inputs.environment }}/050-ingress_ip
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
        run: |
          echo "Creating Ingress IP infrastructure..."
          terraform apply tfplan
          echo "✅ Ingress IP created successfully"

      - name: Set Create Status
        id: create-status
        run: |
          if [ "${{ steps.check-ingress.outputs.exists }}" == "true" ]; then
            echo "status=created" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 6: Verificación final y validación
  verify-creation:
    name: Verify Complete Creation
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    needs: [create-resource-group, create-identity, create-network, create-aks, create-ingress-ip]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure OIDC Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Final Verification
        run: |
          echo "=== Final Creation Verification ==="
          echo "Environment: ${{ github.event.inputs.environment }}"
          
          # Verificar que todos los recursos se crearon correctamente
          echo "Checking that all resources were created successfully..."
          
          # Listar resource groups para verificar que existen
          echo "Resource Groups created:"
          az group list --query "[?contains(name, 'myproject') || contains(name, 'MC_')].{Name:name,Location:location,ProvisioningState:provisioningState}" -o table
          
          # Verificar estado de AKS si existe
          echo "AKS Clusters:"
          az aks list --query "[].{Name:name,ResourceGroup:resourceGroup,ProvisioningState:provisioningState,PowerState:powerState.code}" -o table
          
          # Verificar redes virtuales
          echo "Virtual Networks:"
          az network vnet list --query "[].{Name:name,ResourceGroup:resourceGroup,ProvisioningState:provisioningState,AddressSpace:addressSpace.addressPrefixes}" -o table
          
          # Verificar identidades administradas
          echo "Managed Identities:"
          az identity list --query "[].{Name:name,ResourceGroup:resourceGroup,PrincipalId:principalId}" -o table
          
          echo "=== Creation Summary ==="
          echo "Resource Group: ${{ needs.create-resource-group.outputs.resource_group_created }}"
          echo "Identity: ${{ needs.create-identity.outputs.identity_created }}"
          echo "Network: ${{ needs.create-network.outputs.network_created }}"
          echo "AKS Cluster: ${{ needs.create-aks.outputs.aks_created }}"
          echo "Ingress IP: ${{ needs.create-ingress-ip.outputs.ingress_created }}"
          echo "Execution Time: $(date -u)"
          echo "Workflow Status: ${{ job.status }}"
          echo "====================================="
          
          # Verificación de salud del cluster
          echo "=== AKS Cluster Health Check ==="
          if [ "${{ needs.create-aks.outputs.aks_created }}" == "created" ]; then
            echo "Checking AKS cluster health..."
            # Obtener el nombre del cluster y resource group desde la configuración
            CLUSTER_NAME=$(grep -o 'cluster_name[[:space:]]*=[[:space:]]*"[^"]*"' ./environment/${{ github.event.inputs.environment }}/010-aks/terraform.tfvars | cut -d'"' -f2)
            RESOURCE_GROUP=$(grep -o 'resource_group_name[[:space:]]*=[[:space:]]*"[^"]*"' ./environment/${{ github.event.inputs.environment }}/010-aks/terraform.tfvars | cut -d'"' -f2)
            
            if [ ! -z "$CLUSTER_NAME" ] && [ ! -z "$RESOURCE_GROUP" ]; then
              echo "Cluster: $CLUSTER_NAME in Resource Group: $RESOURCE_GROUP"
              
              # Verificar estado del cluster
              CLUSTER_STATUS=$(az aks show --name "$CLUSTER_NAME" --resource-group "$RESOURCE_GROUP" --query provisioningState -o tsv 2>/dev/null)
              if [ "$CLUSTER_STATUS" = "Succeeded" ]; then
                echo "✅ AKS cluster is healthy and running"
                
                # Verificar nodos del cluster
                NODE_COUNT=$(az aks show --name "$CLUSTER_NAME" --resource-group "$RESOURCE_GROUP" --query agentPoolProfiles[0].count -o tsv 2>/dev/null)
                echo "Cluster has $NODE_COUNT nodes"
                
                # Verificar versión de Kubernetes
                K8S_VERSION=$(az aks show --name "$CLUSTER_NAME" --resource-group "$RESOURCE_GROUP" --query kubernetesVersion -o tsv 2>/dev/null)
                echo "Kubernetes version: $K8S_VERSION"
              else
                echo "⚠️ AKS cluster status: $CLUSTER_STATUS"
              fi
            else
              echo "⚠️ Could not determine cluster name or resource group from configuration"
            fi
          else
            echo "AKS cluster creation was skipped"
          fi
          
          echo "=== Verification Complete ==="
