name: Terraform Apply AKS Cluster

on:
  # Ejecución manual desde la interfaz de GitHub
  workflow_dispatch:

env:
  AKS_NAME: ${{ secrets.AKS_NAME }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}

jobs:
  create-aks-cluster:
    name: Create AKS Cluster with Terraform
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.6.0"

      - name: Check AKS Cluster Status
        id: check-status
        run: |
          echo "Checking status of AKS cluster: $AKS_NAME"
          
          # Obtener el estado del cluster
          CLUSTER_STATUS=$(az aks show \
            --resource-group $RESOURCE_GROUP \
            --name $AKS_NAME \
            --query "provisioningState" \
            --output tsv 2>/dev/null || echo "not_found")
          
          echo "Cluster status: $CLUSTER_STATUS"
          
          if [ "$CLUSTER_STATUS" = "not_found" ]; then
            echo "Cluster not found, will create it"
            echo "status=not_found" >> $GITHUB_OUTPUT
          elif [ "$CLUSTER_STATUS" = "Succeeded" ]; then
            echo "Cluster already exists and is ready"
            echo "status=exists" >> $GITHUB_OUTPUT
          elif [ "$CLUSTER_STATUS" = "Creating" ] || [ "$CLUSTER_STATUS" = "Updating" ]; then
            echo "Cluster is currently being created/updated"
            echo "status=creating" >> $GITHUB_OUTPUT
          else
            echo "Unknown cluster status: $CLUSTER_STATUS"
            echo "status=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Auto-Confirm Creation
        if: steps.check-status.outputs.status == 'not_found'
        run: |
          echo "✅ Creación automáticamente confirmada. Procediendo con Terraform apply..."

      - name: Terraform Init
        if: steps.check-status.outputs.status == 'not_found'
        working-directory: ./
        run: |
          echo "Initializing Terraform..."
          terraform init

      - name: Terraform Plan
        if: steps.check-status.outputs.status == 'not_found'
        working-directory: ./
        run: |
          echo "Planning Terraform apply..."
          terraform plan -out=apply.tfplan

      - name: Terraform Apply
        if: steps.check-status.outputs.status == 'not_found'
        working-directory: ./
        run: |
          echo "Executing Terraform apply..."
          terraform apply -auto-approve apply.tfplan
          
          echo "✅ Terraform apply completed successfully"

      - name: Wait for Cluster Ready
        if: steps.check-status.outputs.status == 'not_found'
        run: |
          echo "Waiting for cluster to be ready..."
          
          # Esperar hasta que el cluster esté listo (máximo 20 minutos)
          TIMEOUT=1200
          ELAPSED=0
          INTERVAL=30
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            echo "Checking cluster status... (${ELAPSED}s elapsed)"
            
            CLUSTER_STATE=$(az aks show \
              --resource-group $RESOURCE_GROUP \
              --name $AKS_NAME \
              --query "provisioningState" \
              --output tsv 2>/dev/null || echo "not_found")
            
            if [ "$CLUSTER_STATE" = "Succeeded" ]; then
              echo "✅ Cluster is ready!"
              break
            elif [ "$CLUSTER_STATE" = "Failed" ]; then
              echo "❌ Cluster creation failed"
              exit 1
            else
              echo "Cluster status: $CLUSTER_STATE, waiting..."
              sleep $INTERVAL
              ELAPSED=$((ELAPSED + INTERVAL))
            fi
          done
          
          if [ $ELAPSED -ge $TIMEOUT ]; then
            echo "⚠️ Timeout waiting for cluster to be ready"
            exit 1
          fi

      - name: Get Cluster Credentials
        if: steps.check-status.outputs.status == 'not_found'
        run: |
          echo "Getting cluster credentials..."
          az aks get-credentials \
            --resource-group $RESOURCE_GROUP \
            --name $AKS_NAME \
            --overwrite-existing
          
          echo "✅ Cluster credentials obtained"

      - name: Verify Cluster Health
        if: steps.check-status.outputs.status == 'not_found'
        run: |
          echo "Verifying cluster health..."
          
          # Verificar que los nodos estén listos
          kubectl get nodes -o wide
          
          # Verificar que el cluster esté funcionando
          kubectl cluster-info
          
          echo "✅ Cluster health verification completed"

      - name: Skip Create (Already Exists)
        if: steps.check-status.outputs.status == 'exists'
        run: |
          echo "✅ AKS cluster already exists and is ready. Nothing to do."

      - name: Skip Create (In Progress)
        if: steps.check-status.outputs.status == 'creating'
        run: |
          echo "⚠️ AKS cluster is currently being created/updated. Please wait for it to complete."

      - name: Summary
        run: |
          echo "=== Terraform Apply Workflow Summary ==="
          echo "Cluster Name: $AKS_NAME"
          echo "Resource Group: $RESOURCE_GROUP"
          echo "Execution Time: $(date -u)"
          echo "Workflow Status: ${{ job.status }}"
          echo "========================================"
