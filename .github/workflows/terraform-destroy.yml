name: Terraform Destroy AKS Cluster - Modular Destruction

on:
  # Ejecución manual desde la interfaz de GitHub
  workflow_dispatch:

env:
  ENVIRONMENT: "dev"
  TERRAFORM_VERSION: "1.6.0"

permissions:
  id-token: write
  contents: read

jobs:
  # Job 1: Destruir Ingress IP (depende de AKS)
  destroy-ingress-ip:
    name: Destroy Ingress IP
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      ingress_destroyed: ${{ steps.destroy-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check Ingress IP Status
        id: check-ingress
        working-directory: ./environment/${{ env.ENVIRONMENT }}/050-ingress_ip
        run: |
          echo "Checking if Ingress IP module exists..."
          
          if [ -f "main.tf" ]; then
            echo "Ingress IP module found, will destroy it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Ingress IP module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init - Ingress IP
        if: steps.check-ingress.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/050-ingress_ip
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for Ingress IP destruction..."
          terraform init

      - name: Terraform Destroy - Ingress IP
        if: steps.check-ingress.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/050-ingress_ip
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
        run: |
          echo "Destroying Ingress IP infrastructure..."
          terraform destroy -auto-approve
          echo "✅ Ingress IP destroyed successfully"

      - name: Set Destroy Status
        id: destroy-status
        run: |
          if [ "${{ steps.check-ingress.outputs.exists }}" == "true" ]; then
            echo "status=destroyed" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 2: Destruir AKS Cluster (depende de Network e Identity)
  destroy-aks:
    name: Destroy AKS Cluster
    runs-on: ubuntu-latest
    environment: dev
    needs: destroy-ingress-ip
    outputs:
      aks_destroyed: ${{ steps.destroy-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check AKS Module Status
        id: check-aks
        working-directory: ./environment/${{ env.ENVIRONMENT }}/010-aks
        run: |
          echo "Checking if AKS module exists..."
          
          if [ -f "main.tf" ]; then
            echo "AKS module found, will destroy it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "AKS module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init - AKS
        if: steps.check-aks.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/010-aks
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for AKS destruction..."
          terraform init

      - name: Terraform Destroy - AKS
        if: steps.check-aks.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/010-aks
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
          ARM_USE_OIDC: true
        run: |
          echo "Destroying AKS cluster infrastructure..."
          terraform destroy -auto-approve
          echo "✅ AKS cluster destroyed successfully"

      - name: Wait for AKS Destruction
        if: steps.check-aks.outputs.exists == 'true'
        run: |
          echo "Waiting for AKS cluster to be fully destroyed..."
          sleep 60
          echo "✅ Wait completed"

      - name: Set Destroy Status
        id: destroy-status
        run: |
          if [ "${{ steps.check-aks.outputs.exists }}" == "true" ]; then
            echo "status=destroyed" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 3: Destruir Network (depende de Resource Group)
  destroy-network:
    name: Destroy Network Infrastructure
    runs-on: ubuntu-latest
    environment: dev
    needs: destroy-aks
    outputs:
      network_destroyed: ${{ steps.destroy-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check Network Module Status
        id: check-network
        working-directory: ./environment/${{ env.ENVIRONMENT }}/040-network
        run: |
          echo "Checking if Network module exists..."
          
          if [ -f "main.tf" ]; then
            echo "Network module found, will destroy it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Network module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init - Network
        if: steps.check-network.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/040-network
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for Network destruction..."
          terraform init

      - name: Terraform Destroy - Network
        if: steps.check-network.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/040-network
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
          ARM_USE_OIDC: true
        run: |
          echo "Destroying Network infrastructure..."
          terraform destroy -auto-approve
          echo "✅ Network infrastructure destroyed successfully"

      - name: Set Destroy Status
        id: destroy-status
        run: |
          if [ "${{ steps.check-network.outputs.exists }}" == "true" ]; then
            echo "status=destroyed" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 4: Destruir Identity (depende de Resource Group)
  destroy-identity:
    name: Destroy Identity Infrastructure
    runs-on: ubuntu-latest
    environment: dev
    needs: destroy-aks
    outputs:
      identity_destroyed: ${{ steps.destroy-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check Identity Module Status
        id: check-identity
        working-directory: ./environment/${{ env.ENVIRONMENT }}/030-identity
        run: |
          echo "Checking if Identity module exists..."
          
          if [ -f "main.tf" ]; then
            echo "Identity module found, will destroy it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Identity module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init - Identity
        if: steps.check-identity.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/030-identity
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for Identity destruction..."
          terraform init

      - name: Terraform Destroy - Identity
        if: steps.check-identity.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/030-identity
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
          ARM_USE_OIDC: true
        run: |
          echo "Destroying Identity infrastructure..."
          terraform destroy -auto-approve
          echo "✅ Identity infrastructure destroyed successfully"

      - name: Set Destroy Status
        id: destroy-status
        run: |
          if [ "${{ steps.check-identity.outputs.exists }}" == "true" ]; then
            echo "status=destroyed" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 5: Destruir Resource Group (base para todos)
  destroy-resource-group:
    name: Destroy Resource Group
    runs-on: ubuntu-latest
    environment: dev
    needs: [destroy-network, destroy-identity]
    outputs:
      resource_group_destroyed: ${{ steps.destroy-status.outputs.status }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Check Resource Group Module Status
        id: check-rg
        working-directory: ./environment/${{ env.ENVIRONMENT }}/020-resource_group
        run: |
          echo "Checking if Resource Group module exists..."
          
          if [ -f "main.tf" ]; then
            echo "Resource Group module found, will destroy it"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Resource Group module not found"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Init - Resource Group
        if: steps.check-rg.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/020-resource_group
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_USE_OIDC: true
        run: |
          echo "Initializing Terraform for Resource Group destruction..."
          terraform init

      - name: Terraform Destroy - Resource Group
        if: steps.check-rg.outputs.exists == 'true'
        working-directory: ./environment/${{ env.ENVIRONMENT }}/020-resource_group
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_ACCESS_KEY: ${{ secrets.AZURE_STORAGE_ACCESS_KEY }}
          ARM_USE_OIDC: true
        run: |
          echo "Destroying Resource Group infrastructure..."
          terraform destroy -auto-approve
          echo "✅ Resource Group infrastructure destroyed successfully"

      - name: Set Destroy Status
        id: destroy-status
        run: |
          if [ "${{ steps.check-rg.outputs.exists }}" == "true" ]; then
            echo "status=destroyed" >> $GITHUB_OUTPUT
          else
            echo "status=skipped" >> $GITHUB_OUTPUT
          fi

  # Job 6: Verificación final y limpieza
  verify-destruction:
    name: Verify Complete Destruction
    runs-on: ubuntu-latest
    environment: dev
    needs: [destroy-ingress-ip, destroy-aks, destroy-network, destroy-identity, destroy-resource-group]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure OIDC Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Final Verification
        run: |
          echo "=== Final Destruction Verification ==="
          
          # Verificar que no quedan recursos huérfanos
          echo "Checking for orphaned resources..."
          
          # Listar resource groups que puedan contener recursos del cluster
          echo "Resource Groups remaining:"
          az group list --query "[?contains(name, 'myproject') || contains(name, 'MC_')].{Name:name,Location:location}" -o table
          
          echo "=== Destruction Summary ==="
          echo "Ingress IP: ${{ needs.destroy-ingress-ip.outputs.ingress_destroyed }}"
          echo "AKS Cluster: ${{ needs.destroy-aks.outputs.aks_destroyed }}"
          echo "Network: ${{ needs.destroy-network.outputs.network_destroyed }}"
          echo "Identity: ${{ needs.destroy-identity.outputs.identity_destroyed }}"
          echo "Resource Group: ${{ needs.destroy-resource-group.outputs.resource_group_destroyed }}"
          echo "Execution Time: $(date -u)"
          echo "Workflow Status: ${{ job.status }}"
          echo "====================================="